# Novel Writer - Project Requirements and Development Guidelines

## Project Overview
You are building a Python CLI tool called novelwriter_idea.

Start by reading the full instruction list below and brainstorming the best structure before generating any code.

Do not begin writing any modules until you have planned out the folder structure, agent layout, logging config, CLI logic, and data sources.

After planning, create the scaffold including the CLI entry point, agents folder, logs folder, ideas output folder, and utility modules.

## Core Requirements

### CLI Structure
- Support multiple subcommands
- Primary command: `novelwriter_idea idea`
- Optional flags: --genre, --tone, --themes, --output

### Genre Selection
- Random selection from 100 curated science fiction and fantasy subgenres if none specified
- Store subgenres in separate data file (subgenres.json/yaml)
- Examples: solarpunk, biopunk, cyberpunk, science fantasy, grimdark, gaslamp fantasy, mythic fantasy, hopepunk, cozy fantasy
- Log selected subgenre and category at INFO level

### Output Handling
- Use --output path if provided
- Default: ideas/story-title-or-untitled/
- Filename format: YYYYMMDD-HHMMSS.md
- Sanitize/slugify titles for filenames
- Print full output path to console

### Logging System
- Use Python's built-in logging library
- Log levels: ERROR, WARN, INFO, DEBUG, SUPERDEBUG
- INFO: Major milestones
- DEBUG: Intermediate decisions, prompt data, variables
- SUPERDEBUG: Function calls, prompts, LLM responses, routing
- Default log file: logs/novelwriter.log
- Support console and file logging with independent toggles

### Agent System
The Facilitator Agent orchestrates the process:

1. Genre and Vibe Generator Agent
   - Determines genre, tone, themes
   - Ensures compatibility

2. Pitch Generator Agent
   - Creates multiple elevator pitches
   - Aligns with genre

3. Critic Agent
   - Evaluates pitches
   - Scores on originality, clarity, fit, uniqueness

4. Improver Agent
   - Enhances weak pitches
   - Addresses critic feedback

5. Voter Agent
   - Selects best pitch
   - Ranks options

6. Tropemaster Agent
   - Analyzes tropes
   - Suggests improvements

7. Meeting Recorder Agent
   - Compiles results
   - Generates documentation

### Output Format
Markdown with YAML frontmatter:
```yaml
---
doc_type: idea
doc_id: idea_YYYYMMDD_HHMMSS
status: winner
version: v1
tags: [genre, tone, themes, AI_generated]
title: Story Title
elevator_pitch: 1-2 sentence hook
genre: main genre or subgenre
tone: emotional/narrative style
themes: [core themes]
summary: expanded story concept
notes: creative rationale
tropes: [detected tropes]
trope_suggestions: [alternative twists]
---
```

## Development Guidelines

### Documentation Maintenance
1. Keep docs/SPEC.md and docs/TECHNICAL.md up to date with any code changes
2. Update documentation when:
   - Adding new features or commands
   - Modifying existing functionality
   - Changing configuration options
   - Updating dependencies
3. Ensure documentation reflects current implementation
4. Add examples for new features
5. Update API references when interfaces change

### Code Changes
1. Follow PEP 8 style guide
2. Write tests for new functionality
3. Update existing tests when modifying code
4. Use type hints consistently
5. Document public APIs

### Git Workflow
1. Use conventional commit messages
2. Create feature branches for new work
3. Update documentation before merging
4. Keep commits focused and atomic

### Error Handling
1. Use custom exceptions for specific cases
2. Provide detailed error messages
3. Log errors with context
4. Implement recovery strategies

### Performance
1. Use async/await for I/O operations
2. Implement caching where appropriate
3. Monitor API rate limits
4. Profile code for bottlenecks

### Security
1. Never commit sensitive data
2. Use environment variables for secrets
3. Validate user input
4. Follow security best practices

### Testing
1. Maintain test coverage
2. Use appropriate test types
3. Mock external dependencies
4. Test edge cases

### Logging
1. Use appropriate log levels
2. Include context in messages
3. Don't log sensitive data
4. Follow logging best practices

End of instruction list.
